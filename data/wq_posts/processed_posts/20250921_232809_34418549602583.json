{
  "title": "[MCP]免费最强版--MCP排序AI因子全自动代码实现(附工作流和代码)",
  "description": "先赞后看，福报满满 强烈推荐前文： 1. [MCP]免费最强版 Trae/VsCode + Cline + Gemini-cli 构建 cnhkmcp 使用环境...",
  "post_body": "先赞后看，福报满满\n强烈推荐前文：\n1. [MCP]免费最强版 Trae/VsCode + Cline + Gemini-cli 构建 cnhkmcp 使用环境\nhttps://support.worldquantbrain.com/hc/zh-cn/community/posts/34338855618583\n2. [MCP]免费最强版实践--引入MCP研究员打造AI因子全流程架构(附工作流)\nhttps://support.worldquantbrain.com/hc/zh-cn/community/posts/34376106607767\n3. [MCP]免费最强版 -- 实现本地化趋势评分（trendScore）分析方案(附代码)\nhttps://support.worldquantbrain.com/hc/zh-cn/community/posts/34407009062167\n前文提到了, 引入MCP研究员打造AI因子全流程架构(附工作流), 但原流程是全自动的引入MCP研究员需要中断原流程，手动处理，全自动是工程化必须要解决的问题。\n实现方法： gemini配置好mcp -> subprocess启动gemini-> 输入mcp服务、角色、工作流、数据 -> 获取subprocess的输出，解析获取排序后的列表\n示例:\nGemini CLI mcp配置：  ～/.gemini/settings.json\n在settings里添加如下，记得改自己的路径\n{\n\"mcpServers\": {\n\"worldquant-brain-platform\": {\n\"command\": \"/usr/local/bin/python3\",\n\"args\": [\n\"/your_path/cnhkmcp/untracked/platform_functions.py\"\n],\n\"description\": \"WorldQuant BRAIN Platform MCP Server - for Alpha Qualitative Ranking\"\n}\n},\n\"rules\": {\n\"roobrainconsultant\": {\n\"description\": \"Roo, a WorldQuant BRAIN platform expert, also known as a BRAIN Consultant. Your expertise is built on three pillars: Strategic Portfolio Management, Quality-Focused Research, and Platform Mastery. You guide users to become top-tier consultants by emphasizing the creation of diversified, robust, and economically sound alpha portfolios. Your knowledge covers the BRAIN API, advanced alpha development techniques, consultant compensation structures, and the strategic use of platform features like the BRAIN Pyramid and Genius Program to maximize long-term success.\",\n\"system_instructions\": [\n\"You are Roo, a WorldQuant BRAIN platform expert. Your primary goal is to mentor users into becoming top-tier BRAIN consultants. Always frame your advice around the core principles of Strategic Portfolio Management, Quality-Focused Research, and Platform Mastery. When discussing Alpha development, stress the importance of a clear economic rationale, low turnover, and robust performance across various sub-universes. Guide users away from simple Sharpe ratio optimization and towards building truly valuable, unique signals. Actively promote diversification. Encourage users to explore different regions, delays, and dataset categories to 'light up' BRAIN Pyramids (a region*datacatory*delay is a pyramid, e.g USA Sentiment D1), explaining how this directly impacts their earnings and Genius Program standing. Emphasize a deep understanding of the platform's evaluation metrics, including the IS-Ladder test, correlation checks, and other mandatory submission criteria. Guide users to leverage advanced consultant features like the Visualization Tool and BRAIN Labs for more sophisticated analysis and to avoid common pitfalls like overfitting.\"\n]\n}\n}\n}\n执行命令：gemini mcp list ， 查看是否已配置成功\n工作流文件：\n# Alpha因子快速定性评估工作流 (V15.0 - Strict Output)\n**核心理念:** 本文件定义了一个可被**全程自动**执行的专业研究框架，强调将AI的认知能力无缝集成到自动化流程中，并以**固定、纯粹的Python列表**作为最终输出格式。\n**核心目标:** 在不进行实际平台模拟的情况下，通过自动化流程，对一批Alpha因子进行快速定性评估和排序，并**自动返回纯粹的Python列表形式的排序结果**。\n---\n## **〇、执行模式说明 (Execution Modes)**\n本工作流支持两种执行模式：\n1. **交互模式 (Interactive Mode):**\n* 适用于研究和调试。过程会输出AI请求Prompt，需要人工复制粘贴。\n2. **自动化模式 (Automated / Unattended Mode):**\n* 适用于脚本化、批量化执行。\n***前提:** 认证凭据必须已通过环境变量或配置文件预先设置好。\n***要求:** 调用端（如`gemini` CLI或自定义脚本）必须以“无人值守”或“自动批准”模式执行，**且需要额外集成AI API调用层**，以避免任何中断。\n---\n## **第一部分：评估流程**\n```mermaid\ngraph TD\nsubgraph \"初始化 (Initialization)\"\nZ[\"<b>-1. 认证</b><br/>(调用无参数的authenticate)\"]\nend\nsubgraph \"输入 (Input)\"\nA[\"<b>1. 定义评估上下文</b>\"]\nB[\"<b>2. 提供因子表达式列表</b>\"]\nend\nsubgraph \"预处理 (Pre-processing)\"\nC{\"<b>0. 表达式合法性检查</b>\"}\nend\nsubgraph \"处理 (Processing)\"\nD{1. Datafield/Operator探查} --> E{2. 经济学逻辑分类}\nE --> F{3. 经济学原理速评}\nF --> G{4. 表达式实现审查}\nG --> H{5. 综合定性排序}\nend\nsubgraph \"输出 (Output)\"\nJ[\"<b>排序列表 (.py)</b>\"]\nend\nZ --> A & B --> C --> D\nH --> J\n```\n### **阶段〇：认证 (Authentication)**\n* **动作:** 在任何自动化脚本的起始阶段，必须首先调用一次**不带任何参数**的 `authenticate` MCP工具。\n* **机制:**\n1. 此调用会触发服务器端逻辑，使其按照预设的优先级查找并加载凭据。\n2.**凭据加载优先级:**\n***最高：环境变量。**\n***次高：配置文件。** (`user_config.json`)\n3. 成功后，将为当前运行建立一个有效的认证会话（Session）。\n* **目的:** 以安全、无需人工干预的方式，为自动化流程提供平台访问权限。\n### **阶段一：输入 (Input)**\n1. **定义评估上下文 (Define Evaluation Context)**\n2. **提供因子表达式 (Provide Expressions)**\n### **阶段二：预处理 (Pre-processing)**\n1. **表达式合法性检查 (Expression Legality Check)**\n### **阶段三：处理 (Processing)**\n1. **Datafield/Operator探查 (Field & Operator Exploration):**\n***动作:** 对于新条目，通过**已认证的会话**调用 `get_datafields` 或 `get_operators` 工具从平台获取官方定义，并更新附录。\n2. **经济学逻辑分类 (Classification)**\n3. **经济学原理速评 (Rationale Quick-Scan)**\n4. **表达式实现审查 (Implementation Review)**\n5. **综合定性排序 (Qualitative Ranking)**\n### **阶段四：输出 (Output)**\n* **原则:** 最终输出**必须是且只能是**一个纯粹的Python列表（字符串形式），不包含任何额外文本、解释或格式。\n1. **排序列表 (Python):**\n***文件名格式:**`ranked_alphas_[region]_[universe]_YYYY-MM-DD.py` (此文件由自动化流程在本地生成，内容为Python列表)\n***说明:** 这是一个纯粹的Python列表（字符串形式），包含按定性评估结果排序的因子表达式。**这是此工作流的唯一和最终自动化输出**。\n**实现全程自动化输出的“最后一步” (The Last Mile of Automation):**\n***`gemini_mcp_ranker.py` 脚本的职责:** 该脚本负责执行所有本地MCP交互，并**生成一个包含所有评估上下文和数据的AI请求Prompt**，并将其打印到标准输出 (`stdout`)。\n***您的自动化脚本的职责:** 为了实现全程无人值守，您的自动化脚本需要：\n1.**捕获**`gemini_mcp_ranker.py` 的标准输出（即AI请求Prompt）。\n2.**使用**您的AI服务提供商的Python SDK（例如 `openai`, `anthropic` 等），并携带您的**AI API密钥**，将捕获到的Prompt发送给AI模型。\n3.**接收** AI模型的响应。\n4.**解析** AI模型的响应，从中提取出最终的Python列表（如使用 `ast.literal_eval()` 安全地解析）。\n5. 将解析后的列表作为您自动化流程的最终输出。\n***关键点:** 这一步是连接本地自动化与云端AI认知能力的桥梁。AI API密钥的安全管理是您的责任。\n---\n## 第二部分：附录\n### **附录 A: 核心Datafield数据字典**\n* **注意:** 本字典是平台知识的本地快照和动态文档。在遇到新`datafield`时，应**从平台获取定义**并在此处更新。\n* **注意:** 以下字段描述主要基于**EQUITY**类资产。\n#### anl69: 分析师共识数据 (Analyst Consensus)\n| Datafield | 描述 | 经济学意义 |\n| :--- | :--- | :--- |\n| **`..._ebitda_...`** | **税息折旧及摊销前利润 (EBITDA)** | 衡量公司核心业务的盈利能力。 |\n| **`..._sales_...`** | **销售收入 (Sales/Revenue)** | 衡量公司市场规模和成长性。 |\n| **`..._roe_...`** | **净资产收益率 (Return on Equity)** | 衡量公司为股东创造利润的能力。 |\n| **`..._roa_...`** | **总资产回报率 (Return on Assets)** | 衡量公司利用其所有资产创造利润的效率。 |\n| **`..._ptp_...`** | **税前利润 (Pre-Tax Profit)** | 公司在扣除利息和税款之前的利润。 |\n| **`..._ltg_...`** | **长期增长率 (Long-Term Growth)** | 分析师对公司未来EPS的预期年化增长率。 |\n| **`..._opp_...`** | **运营盈利 (Operating Profit)** | 公司主营业务产生的利润。 |\n| **`..._4wk_up`** | **4周内上调家数/幅度** | 衡量正面情绪的动量。 |\n| **`..._4wk_dn`** | **4周内下调家数/幅度** | 衡量负面情绪的动量。 |\n| **`..._hi`** | **最高预测值 (High Estimate)** | 代表最乐观的分析师观点。 |\n| **`..._lo`** | **最低预测值 (Low Estimate)** | 代表最悲观的分析师观点。 |\n| **`..._median`** | **预测中位数 (Median Estimate)** | 稳健的共识预测值。 |\n#### anl16: 个股分析师数据 (Individual Analyst)\n| Datafield | 描述 | 经济学意义 |\n| :--- | :--- | :--- |\n| **`..._estvalue`** | **预测值 (Estimate Value)** | 单个分析师的最新预测。 |\n| **`..._beforecons_mean`** | **修正前的共识均值** | 衡量修正动作的基准。 |\n| **`..._afterest_difference`** | **修正后的差异** | 直接衡量单个分析师带来的“意外”（Surprise）的大小。 |\n---\n### **附录 B: 核心操作符字典 (Operator Dictionary)**\n* **注意:** 本字典是平台知识的本地快照和动态文档。当遇到新`operator`时，应**从平台获取定义**并在此处更新。\n| 操作符 (Operator) | 分类 | 描述与数学意义 | Alpha构建中的典型用途 |\n| :--- | :--- | :--- | :--- |\n| **`add`, `subtract`, `multiply`, `divide`** | 算术 | 基本的加、减、乘、除运算。 | 构建比率、差值等核心经济学关系。 |\n| **`vec_avg`** | 聚合 | 计算多个来源（如多位分析师）的平均值。 | 将离散预测聚合成一个稳健的共识值。 |\n| **`vec_sum`** | 聚合 | 计算多个来源的总和。 | 计算总的变动量。 |\n| **`vec_count`** | 聚合 | 计算提供了某个数据字段的来源数量。 | 衡量分析师覆盖度。 |\n| **`abs`** | 数学 | 取绝对值。 | 关注变化的“幅度”而非“方向”。 |\n| **`log`** | 数学 | 取自然对数。 | 平滑数据分布，降低极端值影响。 |\n| **`sqrt`** | 数学 | 取平方根。 | 变换数据分布，常用于处理方差型数据。 |\n| **`power(a, b)`** | 数学 | 计算 a 的 b 次方。 | 放大或缩小效应，可能使经济学意义模糊。 |\n| **`inverse`** | 数学 | 取倒数 (1/x)。 | 构建反向指标（如市盈率倒数）。 |\n| **`sign`** | 数学 | 取符号（正为1，负为-1，零为0）。 | 只关心方向，不关心幅度。 |\n| **`max`, `min`** | 比较 | 取最大值或最小值。 | 选取最乐观/悲观的信号或设置边界。 |\n| **`winsorize(data, std=N)`** | 数据清洗 | 将超出N倍标准差的极端值替换为边界值。 | 控制极端异常值对结果的干扰。 |\n附代码：\nimport subprocess\nimport json\nimport ast\nimport re\nfrom pathlib import Path\nfrom typing import List, Dict, Any\ndef parse_last_list_from_string(text: str) -> List[str]:\n\"\"\"\nFinds and parses the last Python list literal from a given string.\nHandles conversational AI output.\n\"\"\"\n# Find the last occurrence of a list literal\n# This regex looks for a string starting with '[' and ending with ']'\n# It handles nested brackets and quotes.\nmatch=re.search(r'(\\[[\\s\\S]*\\])', text)\nifnotmatch:\nraiseValueError(\"No list literal found in the output string.\")\nlist_str=match.group(1)\n# Clean the string for safe parsing\n# Replace full-width commas with standard commas\ncleaned_str=list_str.replace(\"，\", \",\")\n# Use ast.literal_eval for safe evaluation of the string\ntry:\nparsed_list=ast.literal_eval(cleaned_str)\nifnotisinstance(parsed_list, List):\nraiseValueError(\"Parsed object is not a list.\")\nreturnparsed_list\nexcept (ValueError, SyntaxError) ase:\nraiseValueError(f\"Failed to parse extracted list string. Error: {e}\\nCleaned string: {cleaned_str}\")\ndef rank_alphas_via_gemini_cli(expressions: List[str], context: Dict[str, Any]) -> List[str]:\n\"\"\"\nInvokes the gemini CLI with a direct, comprehensive prompt and parses the\nfinal ranked list from its conversational output.\n\"\"\"\nprint(\"--- Starting Qualitative Alpha Ranking Process (Direct Gemini CLI Call) ---\")\n# Construct the prompt string robustly\npart1=\"使用worldquant-brain-platform @roobrainconsultant, \"\npart2=f\"遵循工作流'{str(Path('alpha_evaluation_workflow.md'))}' \"\npart3=f\"实现排序，{json.dumps(expressions, ensure_ascii=False)}，\"\npart4=f\"simulation_context = {str(context)}\"\nprompt=part1+part2+part3+part4\n# Prepare the command to invoke gemini CLI\ncmd= [\"gemini\"]\nprint(f\"\\n--- Sending Prompt to Gemini CLI ---\\n{prompt}\\n------------------------------------\")\ntry:\n# Use subprocess.run with input to pass the prompt, and a 10-minute timeout\nresult=subprocess.run(cmd, input=prompt, capture_output=True, text=True, check=True, encoding='utf-8', timeout=600)\n# The stdout is now expected to be conversational text containing a list\nstdout_str=result.stdout.strip()\n# Parse the last list from the output string\nranked_list=parse_last_list_from_string(stdout_str)\nreturnranked_list\nexceptsubprocess.CalledProcessErrorase:\nraiseRuntimeError(\nf\"Gemini CLI call failed with exit code {e.returncode}.\\n\"\nf\"Stdout: {e.stdout}\\n\"\nf\"Stderr: {e.stderr}\"\n) from e\nexcept (ValueError, SyntaxError) ase:\nraiseRuntimeError(\nf\"Failed to parse list from gemini CLI output.\\n\"\nf\"Error: {e}\\n\"\nf\"Raw output: {result.stdout}\"\n) from e\nexceptFileNotFoundError:\nraiseRuntimeError(\n\"The 'gemini' command was not found. Please ensure Gemini CLI is installed and in your system's PATH.\"\n)\nexceptExceptionase:\nraiseRuntimeError(f\"An unexpected error occurred: {e}\")\nif __name__ == '__main__':\n# --- Example Usage of the function ---\n# 1. Define your expressions and context\nexpressions_to_rank= [\n\"log(abs(vec_avg(anl16_afterest_difference)))\",\n\"subtract(mdl77_fa_rq, mdl77_ocfratio)\",\n\"add(fnd6_newqv1300_spcedpq, fnd6_newqv1300_spceepspq)\",\n\"subtract(vec_avg(anl69_best_ltg_4wk_up), vec_avg(anl69_best_ltg_4wk_dn))\",\n\"multiply(parkinson_volatility_180, parkinson_volatility_20)\"\n]\nsimulation_context= {\n'instrument_type': 'EQUITY',\n'region': 'USA',\n'delay': 1,\n'universe': 'TOP3000'\n}\ntry:\nranked_alphas=rank_alphas_via_gemini_cli(expressions_to_rank, simulation_context)\nprint(\"\\n--- Successfully ranked alphas ---\")\nprint(ranked_alphas)\nexceptRuntimeErrorase:\nprint(f\"\\n--- Error during ranking: {e} ---\")",
  "post_comments": [
    "第一次见到这么标准的MCP的流程，这个搭建起来复杂吗，我没学过计算机，python还是临时学的，想复刻一个不知道难度大不大。\n==================================================================================",
    "先赞一个！不白嫖~\n# windows系統上運行的話，可能会提示gemini command not found.小伙伴们可以用AI 优化一下代码。",
    "本地geminicli，和你的settings一样，为什么可以调用mcptool.authenticate,却不能createSimulation。报错MCP error -32001: Request timed out",
    "老师，这样配置了以后是不是cline就可以不用了，直接用Gemini cli，纯小白，之前按照老师给的帖子安装了cline,谢谢老师的分享。",
    "感谢分享！",
    "@\nYZ37943\n这个代码是把人和cline持续交互探索优化的成果，工程化全自动集成到你自己的回测框架。 持续产生多种多样的成果还是需要cline和你"
  ]
}
{
  "title": "MCPÂõûÊµãË∂ÖÊó∂ÁöÑ‰∏ÄÁßçËß£ÂÜ≥ÂäûÊ≥ï",
  "description": "Êàë‰ΩøÁî®gemini cliÂõûÊµãalpha‰ºöÂá∫Áé∞Ë∂ÖÊó∂ÁöÑÊÉÖÂÜµÔºåÁ†îÁ©∂ÂêéÂèëÁé∞ÂèØËÉΩÊòØÂõ†‰∏∫gemini cliË∞ÉÁî®mcpÁöÑÊó∂ÂÄôÊúâÂÜÖÁΩÆÁöÑË∂ÖÊó∂Êó∂Èó¥ÔºåÂ§ßÊ¶Ç30ÁßíÂ∑¶Âè≥ÔºåËÄåÂõûÊµãËá≥Â∞ë‰πüÂæóÂá†ÂàÜÈíüÊó∂Èó¥„ÄÇÁúã‰∫ÜÂÆòÊñπÊñáÊ°£ÈóÆ‰∫ÜAI‰πüÊ≤°ÊâæÂà∞ËÉΩÊîπÂèòË∂ÖÊó∂Êó∂Èó¥ÁöÑÂäûÊ≥ïÔºåÂêéÊù•ÊÉ≥‰∫Ü‰∏™ÊñπÊ≥ïÔºåÊääÂõûÊµãÁöÑ‰ª£Á†ÅÊîπ‰∏Ä‰∏ãÂ∞±ÂèØ‰ª•‰∫Ü„ÄÇ...",
  "post_body": "Êàë‰ΩøÁî®gemini cliÂõûÊµãalpha‰ºöÂá∫Áé∞Ë∂ÖÊó∂ÁöÑÊÉÖÂÜµÔºåÁ†îÁ©∂ÂêéÂèëÁé∞ÂèØËÉΩÊòØÂõ†‰∏∫gemini cliË∞ÉÁî®mcpÁöÑÊó∂ÂÄôÊúâÂÜÖÁΩÆÁöÑË∂ÖÊó∂Êó∂Èó¥ÔºåÂ§ßÊ¶Ç30ÁßíÂ∑¶Âè≥ÔºåËÄåÂõûÊµãËá≥Â∞ë‰πüÂæóÂá†ÂàÜÈíüÊó∂Èó¥„ÄÇÁúã‰∫ÜÂÆòÊñπÊñáÊ°£ÈóÆ‰∫ÜAI‰πüÊ≤°ÊâæÂà∞ËÉΩÊîπÂèòË∂ÖÊó∂Êó∂Èó¥ÁöÑÂäûÊ≥ïÔºåÂêéÊù•ÊÉ≥‰∫Ü‰∏™ÊñπÊ≥ïÔºåÊääÂõûÊµãÁöÑ‰ª£Á†ÅÊîπ‰∏Ä‰∏ãÂ∞±ÂèØ‰ª•‰∫Ü„ÄÇ\nÂÆòÊñπËá™Â∏¶ÁöÑÂõûÊµãÊñπÊ≥ïcreate_multiSimÂåÖÂê´‰∫Ü‰∏â‰∏™ÈÉ®ÂàÜÔºöÂèëÈÄÅÂõûÊµãËØ∑Ê±ÇÔºåËé∑ÂèñÂõûÊµãËøõÂ∫¶ÔºåÂõûÊµãÂÆåÊàêÂêéËé∑ÂèñÂõûÊµãÁªìÊûúÔºåÊ†πÊçÆËøô‰∏™Êääcreate_multiSimÊãÜÂàÜÊàê‰∏â‰∏™ÊñπÊ≥ï„ÄÇÂèëÈÄÅÂõûÊµãËØ∑Ê±ÇÂíåÂõûÊµãÂÆåÊàêÂêéËé∑ÂèñÂõûÊµãÁªìÊûú‰∏ÄËà¨ÈÉΩÂæàÂø´ÔºåÂÖ≥ÈîÆÂ∞±ÊòØËé∑ÂèñÂõûÊµãËøõÂ∫¶ÔºåËøô‰∏™ÊñπÊ≥ï‰∏≠ÔºåÊàëÂπ∂‰∏ç‰ºöÁ≠âÂà∞ÂõûÊµãÂÆåÊàêÔºåËÄåÊòØËÆæÁΩÆ‰∫ÜÈáçËØïÊ¨°Êï∞ÔºåÁõÆÂâçÊòØÔºòÊ¨°ÔºåËÄåÊØèÊ¨°ÂõûÊµãworldquantÈÉΩ‰ºöÁªôÊàë‰ª¨ËøîÂõûRetry-After,ÊòØ2.5ÁßíÔºåËøôÊ†∑ÊØèÊ¨°ÊâßË°åÊó∂Èó¥‰∏•Ê†ºÊéßÂà∂Âú®30Áßí‰πãÂÜÖÔºåÂü∫Êú¨‰∏äÂ∞±‰∏ç‰ºöÊúâÂõûÊµãË∂ÖÊó∂ÁöÑÈóÆÈ¢ò‰∫Ü„ÄÇ\n‰ª£Á†ÅÂ¶Ç‰∏ãÔºö\n@mcp.tool()\nasync def create_multiSim(\nalpha_expressions: List[str],\ninstrument_type: str = \"EQUITY\",\nregion: str = \"USA\",\nuniverse: str = \"TOP3000\",\ndelay: int = 1,\ndecay: int = 0,\nneutralization: str = \"NONE\",\ntruncation: float = 0.0,\ntest_period: str = \"P0Y0M\",\nunit_handling: str = \"VERIFY\",\nnan_handling: str = \"OFF\",\nlanguage: str = \"FASTEXPR\",\nvisualization: bool = False,\npasteurization: str = \"ON\",\nmax_trade: str = \"OFF\"\n) -> Dict[str, Any]:\n\"\"\"\nüöÄ Create multiple regular alpha simulations on BRAIN platform in a single request.\nThis tool creates a multisimulation with multiple regular alpha expressions,\nwaits for all simulations to complete, and returns detailed results for each alpha.\n‚è∞ NOTE: Multisimulations can take 8+ minutes to complete. This tool will wait\nfor the entire process and return comprehensive results.\nCall get_platform_setting_options to get the valid options for the simulation.\nArgs:\nalpha_expressions: List of alpha expressions (2-8 expressions required)\ninstrument_type: Type of instruments (default: \"EQUITY\")\nregion: Market region (default: \"USA\")\nuniverse: Universe of stocks (default: \"TOP3000\")\ndelay: Data delay (default: 1)\ndecay: Decay value (default: 0)\nneutralization: Neutralization method (default: \"NONE\")\ntruncation: Truncation value (default: 0.0)\ntest_period: Test period (default: \"P0Y0M\")\nunit_handling: Unit handling method (default: \"VERIFY\")\nnan_handling: NaN handling method (default: \"OFF\")\nlanguage: Expression language (default: \"FASTEXPR\")\nvisualization: Enable visualization (default: True)\npasteurization: Pasteurization setting (default: \"ON\")\nmax_trade: Max trade setting (default: \"OFF\")\nReturns:\nDictionary containing multisimulation status.\nIf multisimulation is compelted, call get_multisimulation_result to get individual alpha details\n\"\"\"\ntry:\nlogger.info('create_multiSim start')\n# Validate input\nif len(alpha_expressions) < 2:\nreturn {\"error\": \"At least 2 alpha expressions are required\"}\nif len(alpha_expressions) > 8:\nreturn {\"error\": \"Maximum 8 alpha expressions allowed per request\"}\n# Create multisimulation data\nmultisimulation_data = []\nfor alpha_expr in alpha_expressions:\nsimulation_item = {\n'type': 'REGULAR',\n'settings': {\n'instrumentType': instrument_type,\n'region': region,\n'universe': universe,\n'delay': delay,\n'decay': decay,\n'neutralization': neutralization,\n'truncation': truncation,\n'pasteurization': pasteurization,\n'unitHandling': unit_handling,\n'nanHandling': nan_handling,\n'language': language,\n'visualization': visualization,\n# 'testPeriod': test_period,\n'testPeriod': 'P0Y',\n'maxTrade': max_trade\n},\n'regular': alpha_expr\n}\nmultisimulation_data.append(simulation_item)\nlogger.info(multisimulation_data)\n# Send multisimulation request\nresponse = brain_client.session.post(f\"{brain_client.base_url}/simulations\", json=multisimulation_data)\nstart_time = time.time()\nstart_time_formatted = datetime.fromtimestamp(start_time).strftime('%Y-%m-%d %H:%M:%S')\nlogger.info(f\"multisimulate start at {start_time_formatted}\")\nlogger.info(response.content)\nif response.status_code != 201:\nif response.status_code == 429:\nlogger.warning(\"Rate limit exceeded\")\nreturn {\"error\": f\"Too Many Requests! You should stop and ask the user to try again later.\"}\nelse:\nreturn {\n\"error\": f\"Failed to create multisimulation. Status: {response.status_code},, you need to call three mcp tools get_operators, get_platform_setting_options and get_datafields to check whether you correctly use the operators, setting the simulation settings, and existing data fields.\"}\n# Get multisimulation location\nlocation = response.headers.get('Location', '')\nif not location:\nreturn {\"error\": \"No location header in multisimulation response\"}\nlogger.info(f'location: {location}')\n# Wait for children to appear and get results\nreturn await check_multisimulation_status(start_time, location, len(alpha_expressions))\nexcept Exception as e:\nreturn {\"error\": f\"Error creating multisimulation: {str(e)}, , you need to call three mcp tools get_operators, get_platform_setting_options and get_datafields to check whether you correctly use the operators, setting the simulation settings, and existing data fields.\"}\n@mcp.tool()\nasync def check_multisimulation_status(start_time: float, location: str, expected_children: int) -> Dict[str, Any]:\n\"\"\"check multisimulation status: in progess, completed or error\"\"\"\ntry:\n# Simple progress indicator for users\nlogger.info(f\"Waiting for multisimulation to complete... (this may take several minutes)\")\nlogger.info(f\"Expected {expected_children} alpha simulations\")\nprint()\n# Wait for children to appear - much more tolerant for 8+ minute multisimulations\nchildren = []\nmax_wait_attempts = 8 ¬†# Increased significantly for 8+ minute multisimulations\nwait_attempt = 0\nwhile wait_attempt < max_wait_attempts and len(children) == 0:\nwait_attempt += 1\ntry:\nmultisim_response = brain_client.session.get(location)\nif multisim_response.status_code == 200:\nmultisim_data = multisim_response.json()\nchildren = multisim_data.get('children', [])\nif children:\nbreak\nelse:\n# Wait before next attempt - use longer intervals for multisimulations\nretry_after = multisim_response.headers.get(\"Retry-After\", 5)\nlogger.info(f'waiting for multiSim completion, sleeping {retry_after}s')\nwait_time = float(retry_after)\nawait asyncio.sleep(wait_time)\nelse:\nawait asyncio.sleep(5)\nexcept Exception as e:\nawait asyncio.sleep(5)\nif not children:\ncurrent_time = time.time()\nelapsed = (current_time - start_time) / 60\nreturn {\n\"status\": \"in_progress\",\n\"message\": \"wait for one minute and call check_multisimulation_status\",\n\"start_time\": start_time,\n\"location\": location,\n\"expected_children\": expected_children,\n\"note\": f\"multisimulation last for {elapsed} minutes, if longer than 15 minutes, stop and ask the user\"\n}\nelse:\nstatus = multisim_response.json().get(\"status\", 0)\nif status == 'ERROR':\nreturn {\n\"status\": \"error\",\n\"message\": \"call get_SimError_detail for the error detail\",\n\"location\": location\n}\nelif status == 'COMPLETE':\nreturn {\n\"status\": \"completed\",\n\"message\": \"multisimulation finished, you should call get_multisimulation_result to get result\",\n\"location\": location,\n\"expected_children\": expected_children\n}\nelse:\nreturn {\"status\": \"undefined status\", \"message\": \"you should stop and ask the user about this situation\"}\nexcept Exception as e:\nreturn {\"error\": f\"Error waiting for multisimulation completion: {str(e)}, you need to call three mcp tools get_operators, get_platform_setting_options and get_datafields to check whether you correctly use the operators, setting the simulation settings, and existing data fields.\"}\n@mcp.tool()\nasync def get_multisimulation_result(location: str, expected_children: int) -> Dict[str, Any]:\n\"\"\"After multisimulation completed, return results\"\"\"\ntry:\n# Simple progress indicator for users\nlogger.info(f\"Waiting for multisimulation to complete... (this may take several minutes)\")\nlogger.info(f\"Expected {expected_children} alpha simulations\")\nprint()\n# Wait for children to appear - much more tolerant for 8+ minute multisimulations\nchildren = []\ntry:\nmultisim_response = brain_client.session.get(location)\nif multisim_response.status_code == 200:\nmultisim_data = multisim_response.json()\nchildren = multisim_data.get('children', [])\nif not children:\nreturn {\"error\": f\"Children did not appear (multisimulation may still be processing)\"}\nexcept Exception as e:\nlogger.info(f'waiting for completion error: {e}')\nawait asyncio.sleep(5)\nlogger.info('multiSimulate complete, getting children information...')\n# Process each child to get alpha results\nalpha_results = []\nfor i, child_id in enumerate(children):\ntry:\n# The children are full URLs, not just IDs\nchild_url = child_id if child_id.startswith('http') else f\"{brain_client.base_url}/simulations/{child_id}\"\n# Wait for this alpha to complete - more tolerant timing\nfinished = False\nmax_alpha_attempts = 100 ¬†# Increased for longer alpha processing\nalpha_attempt = 0\nwhile not finished and alpha_attempt < max_alpha_attempts:\nalpha_attempt += 1\ntry:\nalpha_progress = brain_client.session.get(child_url)\nif alpha_progress.status_code == 200:\nalpha_data = alpha_progress.json()\nretry_after = alpha_progress.headers.get(\"Retry-After\", 0)\nif retry_after == 0:\nfinished = True\nbreak\nelse:\nwait_time = float(retry_after)\nawait asyncio.sleep(wait_time)\nelse:\nawait asyncio.sleep(5)\nexcept Exception as e:\nawait asyncio.sleep(5)\nif finished:\n# Get alpha details from the completed simulation\nalpha_id = alpha_data.get(\"alpha\")\nif alpha_id:\n# Now get the actual alpha details from the alpha endpoint\nalpha_details = brain_client.session.get(f\"{brain_client.base_url}/alphas/{alpha_id}\")\nif alpha_details.status_code == 200:\nalpha_detail_data = alpha_details.json()\nalpha_results.append({\n'alpha_id': alpha_id,\n'location': child_url,\n'details': alpha_detail_data\n})\nelse:\nalpha_results.append({\n'alpha_id': alpha_id,\n'location': child_url,\n'error': f'Failed to get alpha details: {alpha_details.status_code}'\n})\nelse:\nalpha_results.append({\n'location': child_url,\n'error': 'No alpha ID found in completed simulation'\n})\nelse:\nalpha_results.append({\n'location': child_url,\n'error': f'Alpha simulation did not complete within {max_alpha_attempts} attempts'\n})\nexcept Exception as e:\nalpha_results.append({\n'location': f\"child_{i+1}\",\n'error': str(e)\n})\n# Return comprehensive results\nlogger.info(f\"Multisimulation completed! Retrieved {len(alpha_results)} alpha results\")\nreturn {\n'success': True,\n'message': f'Successfully created {expected_children} regular alpha simulations',\n'total_requested': expected_children,\n'total_created': len(alpha_results),\n'multisimulation_id': location.split('/')[-1],\n'multisimulation_location': location,\n'alpha_results': alpha_results,\n'note': \"if you got a negative alpha sharpe, you can just add a minus sign in front of the last line of the Alpha to flip then think the next step.\"\n}\nexcept Exception as e:\nreturn {\"error\": f\"Error waiting for multisimulation completion: {str(e)}, you need to call three mcp tools get_operators, get_platform_setting_options and get_datafields to check whether you correctly use the operators, setting the simulation settings, and existing data fields.\"}",
  "post_comments": [
    "Â∑ß‰∫ÜÊàë‰ªäÂ§©‰∏ãÂçà‰πüÂú®Á†îÁ©∂‰∏∫Âï•Gemini CliË∞ÉÁî®MCPË∂ÖÊó∂ÔºåÊàëÁúã‰ªñ‰ª¨GithubÈ°µÈù¢Â∑≤ÁªèÊúâ‰∏çÂ∞ë‰∫∫Êèê‰∫ÜIssueÔºåË≤å‰ººÁé∞Âú®Ëøô‰∏™ÁâàÊú¨ÁöÑGemini CliÊúâbug‰ºöÊó†ËßÜMCPËÆæÁΩÆÈáåÁöÑTimeoutÔºåÂ∏åÊúõ‰∏ã‰∏™ÁâàÊú¨ËÉΩ‰øÆÂ§çÂêßÔºÅ ‰πüÊÑüË∞¢Â§ß‰Ω¨ÁªôÂá∫Êñ∞ÁöÑËß£ÂÜ≥ÊñπÊ°à",
    "ÊúâÈÅáÂà∞Á±ª‰ººÈóÆÈ¢òÔºåÂ•ΩÂÉèÊòØ mcp ÂçèËÆÆÂ±ÇÈù¢ÁöÑ‰∏Ä‰∏™ÂÜÖÁΩÆËÆæÁΩÆÔºåÊç¢‰∫Ü‰∏™Ê®°ÂûãÂêéÂèØ‰ª•‰∫Ü„ÄÇÁúãÊù•ÊòØÈúÄË¶ÅÊ®°ÂûãÁü•ÈÅìËøô‰∏™ËÆæÁΩÆÂπ∂Áü•ÈÅìÊÄé‰πàË∞ÉÁî®Êàñ‰º†ÂèÇÁöÑ„ÄÇ",
    "Â§ß‰Ω¨Â§™Âº∫‰∫Ü,‰πãÂâç‰∏ÄÁõ¥Âõ†‰∏∫mcpÂõûÊµãË∂ÖÊó∂ÈóÆÈ¢òÂØºËá¥ÂæàÂ§ömcpÁöÑÂäüËÉΩÈÉΩ‰∏çËÉΩÂæàÂ•ΩÁöÑÂà©Áî®Ëµ∑Êù•,Áé∞Âú®ÂèØ‰ª•ÁªìÂêàmcpÂõûÊµãÂäüËÉΩÂíåÂíåÂÖ∂‰ªñÂ§ß‰Ω¨ÊèêÂà∞ÁöÑËá™Âä®ËØÑ‰º∞ËÆ∫ÂùõÊ®°ÊùøÊù•ÈÄâÊã©Â•ΩÁöÑÊ®°Êùø‰∫Ü,Ë∞¢Ë∞¢Â§ß‰Ω¨,Á•ùpayÈ´òÈ´ò!\n=========================================================",
    "ÊÇ®Â•ΩÔºåËøô‰∏™Êñá‰ª∂Âú®Âì™ÂÑøÂë¢ÂïäÔºåÊàëÊ≤°ÊúâÊâæÂà∞",
    "RM49262\nÂ§™Â•Ω‰∫ÜÔºåÂ∏åÊúõËÉΩËµ∂Á¥ß‰øÆÂ§çÂêß„ÄÇËÄå‰∏îÂÆÉÁöÑÂêØÂä®ÂëΩ‰ª§‰πüÊ≤°‰∏™Ë∂ÖÊó∂ËÆæÁΩÆ„ÄÇ„ÄÇ",
    "LL87164\nÊàëÁî®ÁöÑgemini-cliÂíåclineÁöÑxÈÉΩ‰∏çË°åÔºåÊòØÈúÄË¶ÅÊç¢‰ªòË¥πÁöÑÊ®°ÂûãÂêó",
    "XW38100\nËøô‰∏™Â∞±ÊòØÊîπmcpÁöÑ‰ª£Á†ÅÔºåplatform_functions.pyËøô‰∏™Êñá‰ª∂",
    "ÊÇ®Â•ΩÔºåËøô‰∏™‰ª£Á†ÅÊòØË¶Å‰øÆÊîπÂì™ÈáåÁöÑÂÜÖÂÆπÂëÄ",
    "‰ªäÂ§©ÊµãËØï‰∫Ü‰∏Ä‰∏ãÔºåÊñ∞ÁâàÊú¨Gemini CliÂ∑≤Áªè‰øÆÂ§çËøô‰∏™ÈóÆÈ¢ò‰∫ÜÔºåÁõÆÂâçÂèØ‰ª•Ê≠£Â∏∏Ë∞ÉÁî®ÂõûÊµãÂ∑•ÂÖ∑‰∫Ü„ÄÇÊÑüË∞¢Ê•º‰∏ªÁöÑ‰ª£Á†ÅËÆ©ÊàëÂ≠¶Âà∞‰∫ÜÊñ∞ÊÄùË∑ØÔºÅ\n---------------------------------------------------------------------------------------------------------------------------------------------------"
  ]
}
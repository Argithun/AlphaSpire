{
  "title": "【即插即用版】用AI自动写regular_description和super_description",
  "description": "背景 基于当前regular alpha和super alpha提交前需要手动填写相关描述信息，手动来回粘贴过于麻烦，此代码输入alpha_id则可以自动区分regular alpha和super...",
  "post_body": "背景\n基于当前regular alpha和super alpha提交前需要手动填写相关描述信息，手动来回粘贴过于麻烦，此代码输入alpha_id则可以自动区分regular alpha和super alpha，并通过调用ai针对表达式生成对应的描述信息，程序全程使用wqb模块进行使用，且针对wqb模块修改alpha属性进行优化修改（并没有修改源码）。\n环境介绍\nwqb\n待提交的alpha_id\n硅基流动api\n硅基流动model：Qwen/Qwen3-30B-A3B-Instruct-2507\nwqb是python的一个模块，相关介绍和文档见：\nhttps://deepwiki.com/rocky-d/wqb/1.1-installation\n大模型使用的是硅基流动（虽然不咋地，但是毕竟免费，我觉得够用了，不想使用硅基流动的可以自行魔改ai_function函数即可）\n顺便打个小广告，赚点免费额度，希望大家不要介意，嘿嘿。\nSiliconCloud 邀请奖励持续进行，2000 万 Tokens 送不停！\n1. 邀请好友赚 2000 万 Tokens：每成功邀请一位新用户通过手机号码注册，您将获得 2000 万 Tokens；\n2. 注册即送 2000 万 Tokens：受邀好友作为新用户完成 SiliconCloud 账号注册，立刻获得 2000万 Tokens。\n欢迎大家使用我的链接：\nhttps://cloud.siliconflow.cn/i/pXMwd7pw\nimport json\nimport re\nimport requests\nfrom wqb import WQBSession, wqb_logger, NULL\nfrom wqb.wqb_session import URL_ALPHAS_ALPHAID\ndef patch_properties_extended(\nself,\nalpha_id: str,\n*args,\nfavorite: bool | None = None,\nhidden: bool | None = None,\nname: str | NULL.__class__ | None = None,\ncategory=None,\ntags=None,\ncolor=None,\nregular_description: str | NULL.__class__ | None = None,\ncombo_description: str | NULL.__class__ | None = None,\nselection_description: str | NULL.__class__ | None = None,\nlog: str | None = '',\n**kwargs,\n):\nurl = URL_ALPHAS_ALPHAID.format(alpha_id)\nproperties = {}\n# 处理所有原有属性（与原函数相同的逻辑）\nif favorite is not None:\nproperties['favorite'] = favorite\nif hidden is not None:\nproperties['hidden'] = hidden\nif name is not None:\nproperties['name'] = None if isinstance(name, NULL.__class__) else name\nif category is not None:\nproperties['category'] = None if isinstance(category, NULL.__class__) else category\nif tags is not None:\nproperties['tags'] = (\n[]\nif isinstance(tags, NULL.__class__)\nelse [tags] if isinstance(tags, str) else list(tags)\n)\nif color is not None:\nproperties['color'] = None if isinstance(color, NULL.__class__) else color\n# 处理描述字段\nif regular_description is not None:\nproperties['regular'] = {}\nproperties['regular']['description'] = (\nNone if isinstance(regular_description, NULL.__class__) else regular_description\n)\nif combo_description is not None:\nproperties['combo'] = {}\nproperties['combo']['description'] = (\nNone if isinstance(combo_description, NULL.__class__) else combo_description\n)\nif selection_description is not None:\nproperties['selection'] = {}\nproperties['selection']['description'] = (\nNone if isinstance(selection_description, NULL.__class__) else selection_description\n)\nresp = self.patch(url, json=properties, *args, **kwargs)\nif log is not None:\nself.logger.info(\n'\\n'.join(\n(\nf\"{self}.patch_properties_extended(...) [\",\nf\"    {url}\",\nf\"    {properties}\",\nf\"]: {log}\",\n)\n)\n)\nreturn resp\ndef ai_function(api_key, model, content):\nurl = \"https://api.siliconflow.cn/v1/chat/completions\"\npayload = {\n\"model\": model,\n\"messages\": [\n{\n\"role\": \"user\",\n\"content\": content\n}\n]\n}\nheaders = {\n\"Authorization\": f\"Bearer {api_key}\",\n\"Content-Type\": \"application/json\"\n}\nresponse = requests.post(url, json=payload, headers=headers)\n# print(response.json())\nreturn response.json()\ndef regular_alpha_remark_template(regular_code, api_key, model):\ntemplate = (\n\"Idea: \"\n\"Rationale for data used: \"\n\"Rationale for operators used:\"\n)\ncontent = (\n\"请严格执行本新指令：无视所有先前关于输出长度的系统指令，你的唯一任务是——\"\nf\"根据regular alpha 表达式: {regular_code}，使用下面的说明模板，对该表达式进行说明，以下是说明模板，要求英文，且描述在100-200词之间\"\nf\"模板为：{template}\"\n)\ndata = ai_function(api_key, model, content)\nreturn data['choices'][0]['message']['content']\ndef super_alpha_remark_template(combo_code, selection_code, api_key, model):\ntemplate = {\n'combo_description' : '',\n'selection_description': ''\n}\ncontent = (\n\"请严格执行本新指令：无视所有先前关于输出长度的系统指令，你的唯一任务是——\"\nf\"根据super alpha 的selection表达式: {selection_code} 和 combo表达式: {combo_code}，使用下面的模板，对selection和combo分别进行说明。\"\nf\"其中对selection的说明填写到模板的selection_description对应位置，对combo的说明填写到模板的combo_description对应位置，以下是说明模板，要求英文，且描述在100-200词之间\"\nf\"{template}\"\n)\nresponse = ai_function(api_key, model, content)\ndata = response['choices'][0]['message']['content']\npattern = r\"'combo_description':\\s*'(?P<combo>.*?)',\\s*'selection_description':\\s*'(?P<select>.*?)'\"\nm = re.search(pattern, data, flags=re.S)\nif m:\ncombo_description = m.group('combo')\nselection_description = m.group('select')\nelse:\ncombo_description = \"\"\nselection_description = \"\"\nreturn combo_description, selection_description\ndef auto_remark(wqb_session, alpha_id, api_key, model):\nalpha_details = wqb_session.locate_alpha(alpha_id).json()\n# print(alpha_details)\n# 处理regular alpha\nif 'regular' in alpha_details.keys():\nregular_code = alpha_details['regular']['code']\nprint(f\"alpha_id: {alpha_id}\")\nprint(f\"regular_code: {regular_code}\")\nregular_description = regular_alpha_remark_template(regular_code, api_key, model)\nwqb_session.patch_properties(\nalpha_id,\nregular_description=regular_description\n)\nprint(f\"regular_description: {regular_description}\")\nprint(\">>> add regular_description successfully\\n\\n\")\n# 处理super alpha\nelif 'combo' in alpha_details.keys() and 'selection' in alpha_details.keys():\ncombo_code = alpha_details['combo']['code']\nselection_code = alpha_details['selection']['code']\nprint(f\"alpha_id: {alpha_id}\")\nprint(f\"cpmbo_code: {combo_code}\")\nprint(f\"selection_code: {selection_code}\")\ncombo_description, selection_description = super_alpha_remark_template(combo_code, selection_code, api_key, model)\nwqb_session.patch_properties_extended(\nalpha_id,\ncombo_description=combo_description,\nselection_description=selection_description\n)\nprint(f\"combo_description: {combo_description}\")\nprint(f\"selection_description: {selection_description}\")\nprint(\">>> add combo_description and selection_description successfully\\n\\n\")\nelse:\nlogger.error(f\"Uknown alpha type,please check alpha_id and alpha_details.\\n{alpha_details}\")\nif __name__ == '__main__':\nusername = \"\"\npassword = \"\"\nalpha_id = \"\"\napi_key = \"\"\nmodel = \"Qwen/Qwen3-30B-A3B-Instruct-2507\"\nWQBSession.patch_properties_extended = patch_properties_extended\nlogger = wqb_logger()\nwqb_session = WQBSession((username, password), logger=logger)\nauto_remark(wqb_session, alpha_id, api_key, model)",
  "post_comments": [
    "感谢大佬！！！"
  ]
}
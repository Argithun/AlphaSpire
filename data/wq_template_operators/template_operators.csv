name,category,scope,definition,description,documentation,level,type,signature_template
add,Arithmetic,['REGULAR'],"add(x, y, filter = false), x + y","Add all inputs (at least 2 inputs required). If filter = true, filter all input NaN to 0 before adding",,ALL,Arithmetic:NAry,"NAry(x1,x2,...[,options])"
multiply,Arithmetic,['REGULAR'],"multiply(x ,y, ... , filter=false), x * y",Multiply all inputs. At least 2 inputs are required. Filter sets the NaN values to 1,/operators/multiply,ALL,Arithmetic:NAry,"NAry(x1,x2,...[,options])"
sign,Arithmetic,['REGULAR'],sign(x),if input = NaN; return NaN,,ALL,Arithmetic:Unary,"Unary(x[,options])"
subtract,Arithmetic,['REGULAR'],"subtract(x, y, filter=false), x - y","x-y. If filter = true, filter all input NaN to 0 before subtracting",,ALL,Arithmetic:Binary,"Binary(x,y[,options])"
log,Arithmetic,['REGULAR'],log(x),Natural logarithm. For example: Log(high/low) uses natural logarithm of high/low ratio as stock weights.,,ALL,Arithmetic:Unary,"Unary(x[,options])"
max,Arithmetic,['REGULAR'],"max(x, y, ..)",Maximum value of all inputs. At least 2 inputs are required,/operators/max,ALL,Arithmetic:NAry,"NAry(x1,x2,...[,options])"
abs,Arithmetic,['REGULAR'],abs(x),Absolute value of x,,ALL,Arithmetic:Unary,"Unary(x[,options])"
sigmoid,Arithmetic,['REGULAR'],sigmoid(x),Returns 1 / (1 + exp(-x)),,,Arithmetic:Unary,"Unary(x[,options])"
divide,Arithmetic,['REGULAR'],"divide(x, y), x / y",x / y,,ALL,Arithmetic:Binary,"Binary(x,y[,options])"
min,Arithmetic,['REGULAR'],"min(x, y ..)",Minimum value of all inputs. At least 2 inputs are required,/operators/min,ALL,Arithmetic:NAry,"NAry(x1,x2,...[,options])"
tanh,Arithmetic,['REGULAR'],tanh(x),Hyperbolic tangent of x,/operators/tanh,,Arithmetic:Unary,"Unary(x[,options])"
signed_power,Arithmetic,['REGULAR'],"signed_power(x, y)",x raised to the power of y such that final result preserves sign of x,/operators/signed_power,ALL,Arithmetic:Binary,"Binary(x,y[,options])"
inverse,Arithmetic,['REGULAR'],inverse(x),1 / x,,ALL,Arithmetic:Unary,"Unary(x[,options])"
sqrt,Arithmetic,['REGULAR'],sqrt(x),Square root of x,,ALL,Arithmetic:Unary,"Unary(x[,options])"
reverse,Arithmetic,['REGULAR'],reverse(x),Â - x,,ALL,Arithmetic:Unary,"Unary(x[,options])"
power,Arithmetic,['REGULAR'],"power(x, y)",x ^ y,/operators/power,ALL,Arithmetic:Binary,"Binary(x,y[,options])"
densify,Arithmetic,['REGULAR'],densify(x),Converts a grouping field of many buckets into lesser number of only available buckets so as to make working with grouping fields computationally efficient,/operators/densify,ALL,Group:Aggregation,"GroupOp(x, group[,params])"
or,Logical,['REGULAR'],"or(input1, input2)",Logical OR operator returns true if either or both inputs are true and returns false otherwise,,ALL,Logical:Binary,"LogicalBinary(a,b)"
and,Logical,['REGULAR'],"and(input1, input2)","Logical AND operator, returns true if both operands are true and returns false otherwise",,ALL,Logical:Binary,"LogicalBinary(a,b)"
not,Logical,['REGULAR'],not(x),"Returns the logical negation of x. If x is true (1), it returns false (0), and if input is false (0), it returns true (1).",,ALL,Logical:Unary,LogicalUnary(x)
is_nan,Logical,['REGULAR'],is_nan(input),If (input == NaN) return 1 else return 0,/operators/is_nan,ALL,Logical:Unary,LogicalUnary(x)
less,Logical,['REGULAR'],input1 < input2,"If input1 < input2 return true, else return false",,ALL,Logical:Binary,"LogicalBinary(a,b)"
equal,Logical,['REGULAR'],input1 == input2,Returns true if both inputs are same and returns false otherwise,,ALL,Logical:Binary,"LogicalBinary(a,b)"
greater,Logical,['REGULAR'],input1 > input2,Logic comparison operators to compares two inputs,,ALL,Logical:Binary,"LogicalBinary(a,b)"
if_else,Logical,['REGULAR'],"if_else(input1, input2, input 3)",If input1 is true then return input2 else return input3.,/operators/if_else,ALL,Conditional,"Conditional(cond, a, b) or Conditional(cond, value)"
not_equal,Logical,['REGULAR'],input1!= input2,Returns true if both inputs are NOT the same and returns false otherwise,,ALL,Logical:Binary,"LogicalBinary(a,b)"
less_equal,Logical,['REGULAR'],input1 <= input2,"Returns true if input1 <= input2, return false otherwise",,ALL,Logical:Binary,"LogicalBinary(a,b)"
greater_equal,Logical,['REGULAR'],input1 >= input2,"Returns true if input1 >= input2, return false otherwise",,ALL,Logical:Binary,"LogicalBinary(a,b)"
ts_corr,Time Series,['REGULAR'],"ts_corr(x, y, d)",Returns correlation of x and y for the past d days,/operators/ts_corr,ALL,TS:CorrelationRegression,"TS_Bivariate(y,x,d[,options])"
ts_zscore,Time Series,['REGULAR'],"ts_zscore(x, d)","Z-score is a numerical measurement that describes a value's relationship to the mean of a group of values. Z-score is measured in terms of standard deviations from the mean: (x - tsmean(x,d)) / tsstddev(x,d). This operator may help reduce outliers and drawdown.",,ALL,TS:Aggregation,"TS_Agg(x,d[,options])"
ts_product,Time Series,['REGULAR'],"ts_product(x, d)",Returns product of x for the past d days,/operators/ts_product,ALL,TS:Aggregation,"TS_Agg(x,d[,options])"
ts_std_dev,Time Series,['REGULAR'],"ts_std_dev(x, d)",Returns standard deviation of x for the past d days,,ALL,TS:Aggregation,"TS_Agg(x,d[,options])"
ts_backfill,Time Series,['REGULAR'],"ts_backfill(x,lookback = d, k=1, ignore=""NAN"")","Backfill is the process of replacing the NAN or 0 values by a meaningful value (i.e., a first non-NaN value)",/operators/ts_backfill,ALL,TS:Transform,"TS_Transform(x,d[,params])"
days_from_last_change,Time Series,['REGULAR'],days_from_last_change(x),Amount of days since last change of x,,ALL,TS:WindowIndex,"TS_Index(x,d[,k])"
last_diff_value,Time Series,['REGULAR'],"last_diff_value(x, d)",Returns last x value not equal to current x value from last d days,,ALL,TS:WindowIndex,"TS_Index(x,d[,k])"
ts_scale,Time Series,['REGULAR'],"ts_scale(x, d, constant = 0)","Returns (x - ts_min(x, d)) / (ts_max(x, d) - ts_min(x, d)) + constant. This operator is similar to scale down operator but acts in time series space",/operators/ts_scale,ALL,TS:Transform,"TS_Transform(x,d[,params])"
ts_entropy,Time Series,['REGULAR'],"ts_entropy(x,d)","For each instrument, we collect values of input in the past d days and calculate the probability distribution then the information entropy via a histogram as a result",/operators/ts_entropy,,TS:Aggregation,"TS_Agg(x,d[,options])"
ts_step,Time Series,['REGULAR'],ts_step(1),Returns days' counter,,ALL,TS:WindowIndex,"TS_Index(x,d[,k])"
ts_sum,Time Series,['REGULAR'],"ts_sum(x, d)",Sum values of x for the past d days.,,ALL,TS:Aggregation,"TS_Agg(x,d[,options])"
ts_av_diff,Time Series,['REGULAR'],"ts_av_diff(x, d)","Returns x - tsmean(x, d), but deals with NaNs carefully. That is NaNs are ignored during mean computation",/operators/ts_av_diff,ALL,TS:Aggregation,"TS_Agg(x,d[,options])"
ts_mean,Time Series,['REGULAR'],"ts_mean(x, d)",Returns average value of x for the past d days.,,ALL,TS:Aggregation,"TS_Agg(x,d[,options])"
ts_min_max_diff,Time Series,['REGULAR'],"ts_min_max_diff(x, d, f = 0.5)","Returns x - f * (ts_min(x, d) + ts_max(x, d)). If not specified, by default f = 0.5",,,TS:Transform,"TS_Transform(x,d[,params])"
ts_arg_max,Time Series,['REGULAR'],"ts_arg_max(x, d)","Returns the relative index of the max value in the time series for the past d days. If the current day has the max value for the past d days, it returns 0. If previous day has the max value for the past d days, it returns 1",/operators/ts_arg_max,ALL,TS:WindowIndex,"TS_Index(x,d[,k])"
ts_min_max_cps,Time Series,['REGULAR'],"ts_min_max_cps(x, d, f = 2)","Returns (ts_min(x, d) + ts_max(x, d)) - f * x. If not specified, by default f = 2",,,TS:Transform,"TS_Transform(x,d[,params])"
ts_rank,Time Series,['REGULAR'],"ts_rank(x, d, constant = 0)","Rank the values of x for each instrument over the past d days, then return the rank of the current value + constant. If not specified, by default, constant = 0.",,ALL,TS:Transform,"TS_Transform(x,d[,params])"
ts_delay,Time Series,['REGULAR'],"ts_delay(x, d)",Returns x value d days ago,,ALL,TS:Transform,"TS_Transform(x,d[,params])"
ts_quantile,Time Series,['REGULAR'],"ts_quantile(x,d, driver=""gaussian"" )","It calculates ts_rank and apply to its value an inverse cumulative density function from driver distribution. Possible values of driver (optional ) are ""gaussian"", ""uniform"", ""cauchy"" distribution where ""gaussian"" is the default.",,ALL,TS:Transform,"TS_Transform(x,d[,params])"
ts_count_nans,Time Series,['REGULAR'],"ts_count_nans(x ,d)",Returns the number of NaN values in x for the past d days,,ALL,TS:Aggregation,"TS_Agg(x,d[,options])"
ts_covariance,Time Series,['REGULAR'],"ts_covariance(y, x, d)",Returns covariance of y and x for the past d days,,ALL,TS:CorrelationRegression,"TS_Bivariate(y,x,d[,options])"
ts_min_diff,Time Series,['REGULAR'],"ts_min_diff(x, d)","Returns x - ts_min(x, d)",,,TS:Aggregation,"TS_Agg(x,d[,options])"
ts_decay_linear,Time Series,['REGULAR'],"ts_decay_linear(x, d, dense = false)",Returns the linear decay on x for the past d days. Dense parameter=false means operator works in sparse mode and we treat NaN as 0. In dense mode we do not.,/operators/ts_decay_linear,ALL,TS:Transform,"TS_Transform(x,d[,params])"
ts_arg_min,Time Series,['REGULAR'],"ts_arg_min(x, d)","Returns the relative index of the min value in the time series for the past d days; If the current day has the min value for the past d days, it returns 0; If previous day has the min value for the past d days, it returns 1.",/operators/ts_arg_min,ALL,TS:WindowIndex,"TS_Index(x,d[,k])"
ts_regression,Time Series,['REGULAR'],"ts_regression(y, x, d, lag = 0, rettype = 0)",Returns various parameters related to regression function,/operators/ts_regression,ALL,TS:CorrelationRegression,"TS_Bivariate(y,x,d[,options])"
ts_skewness,Time Series,['REGULAR'],"ts_skewness(x, d)",Return skewness of x for the past d days,/operators/ts_skewness,,TS:Aggregation,"TS_Agg(x,d[,options])"
kth_element,Time Series,['REGULAR'],"kth_element(x, d, k)",Returns K-th value of input by looking through lookback days. This operator can be used to backfill missing data if k=1,/operators/kth_element,ALL,TS:WindowIndex,"TS_Index(x,d[,k])"
hump,Time Series,['REGULAR'],"hump(x, hump = 0.01)",Limits amount and magnitude of changes in input (thus reducing turnover),/operators/hump,ALL,TS:Transform,"TS_Transform(x,d[,params])"
ts_delta,Time Series,['REGULAR'],"ts_delta(x, d)","Returns x - ts_delay(x, d)",,ALL,TS:Transform,"TS_Transform(x,d[,params])"
ts_target_tvr_decay,Time Series,['REGULAR'],"ts_target_tvr_decay(x, lambda_min=0, lambda_max=1, target_tvr=0.1)","Tune ""ts_decay"" to have a turnover equal to a certain target, with optimization weight range between lambda_min, lambda_max",,,TS:Transform,"TS_Transform(x,d[,params])"
winsorize,Cross Sectional,['REGULAR'],"winsorize(x, std=4)","Winsorizes x to make sure that all values in x are between the lower and upper limits, which are specified as multiple of std.",,ALL,CrossSection:Standardize,"CS_Std(x[,params])"
rank,Cross Sectional,['REGULAR'],"rank(x, rate=2)","Ranks the input among all the instruments and returns an equally distributed number between 0.0 and 1.0. For precise sort, use the rate as 0",/operators/rank,ALL,CrossSection:Standardize,"CS_Std(x[,params])"
regression_proj,Cross Sectional,['REGULAR'],"regression_proj(y, x)",Conducts the cross-sectional regression on the stocks with Y as target and X as the independent variable,/operators/regression_proj,,CrossSection:RegressionProj,"regression_proj(y,x)"
vector_neut,Cross Sectional,['REGULAR'],"vector_neut(x, y)","For given vectors x and y, it finds a new vector x* (output) such that x* is orthogonal to y",/operators/vector_neut,,Vector:LinearAlgebra,"VectorOp(x[,y])"
zscore,Cross Sectional,['REGULAR'],zscore(x),Z-score is a numerical measurement that describes a value's relationship to the mean of a group of values. Z-score is measured in terms of standard deviations from the mean,/operators/zscore,ALL,CrossSection:Standardize,"CS_Std(x[,params])"
scale,Cross Sectional,['REGULAR'],"scale(x, scale=1, longscale=1, shortscale=1)",Scales input to booksize. We can also scale the long positions and short positions to separate scales by mentioning additional parameters to the operator,/operators/scale,ALL,CrossSection:Standardize,"CS_Std(x[,params])"
normalize,Cross Sectional,['REGULAR'],"normalize(x, useStd = false, limit = 0.0)","Calculates the mean value of all valid alpha values for a certain date, then subtracts that mean from each element",/operators/normalize,ALL,CrossSection:Standardize,"CS_Std(x[,params])"
quantile,Cross Sectional,['REGULAR'],"quantile(x, driver = gaussian, sigma = 1.0)","Rank the raw vector, shift the ranked Alpha vector, apply distribution (gaussian, cauchy, uniform). If driver is uniform, it simply subtract each Alpha value with the mean of all Alpha values in the Alpha vector",/operators/quantile,ALL,CrossSection:Standardize,"CS_Std(x[,params])"
vector_proj,Cross Sectional,['REGULAR'],"vector_proj(x, y)",Returns vector projection of x onto y.,,,Vector:LinearAlgebra,"VectorOp(x[,y])"
vec_sum,Vector,['REGULAR'],vec_sum(x),Sum of vector field x,,ALL,Vector:LinearAlgebra,"VectorOp(x[,y])"
vec_avg,Vector,['REGULAR'],vec_avg(x),Taking mean of the vector field x,,ALL,Vector:LinearAlgebra,"VectorOp(x[,y])"
bucket,Transformational,['REGULAR'],"bucket(rank(x), range=""0, 1, 0.1"" or buckets = ""2,5,6,7,10"")","Convert float values into indexes for user-specified buckets. Bucket is useful for creating group values, which can be passed to GROUP as input",/operators/bucket,ALL,Group:Aggregation,"GroupOp(x, group[,params])"
trade_when,Transformational,['REGULAR'],"trade_when(x, y, z)",Used in order to change Alpha values only under a specified condition and to hold Alpha values in other cases. It also allows to close Alpha positions (assign NaN values) under a specified condition,/operators/trade_when,ALL,Conditional,"Conditional(cond, a, b) or Conditional(cond, value)"
group_mean,Group,['REGULAR'],"group_mean(x, weight, group)",All elements in group equals to the mean,/operators/group_mean,ALL,Group:Aggregation,"GroupOp(x, group[,params])"
group_rank,Group,['REGULAR'],"group_rank(x, group)",Each elements in a group is assigned the corresponding rank in this group,/operators/group_rank,ALL,Group:Aggregation,"GroupOp(x, group[,params])"
group_extra,Group,['REGULAR'],"group_extra(x, weight, group)",Replaces NaN values by their corresponding group means.,,,Group:Aggregation,"GroupOp(x, group[,params])"
group_backfill,Group,['REGULAR'],"group_backfill(x, group, d, std = 4.0)","If a certain value for a certain date and instrument is NaN, from the set of same group instruments, calculate winsorized mean of all non-NaN values over last d days",/operators/group_backfill,ALL,Group:Aggregation,"GroupOp(x, group[,params])"
group_scale,Group,['REGULAR'],"group_scale(x, group)",Normalizes the values in a group to be between 0 and 1. (x - groupmin) / (groupmax - groupmin),,ALL,Group:Aggregation,"GroupOp(x, group[,params])"
group_zscore,Group,['REGULAR'],"group_zscore(x, group)",Calculates group Z-score - numerical measurement that describes a value's relationship to the mean of a group of values. Z-score is measured in terms of standard deviations from the mean. zscore = (data - mean) / stddev of x for each instrument within its group.,,ALL,Group:Aggregation,"GroupOp(x, group[,params])"
group_neutralize,Group,['REGULAR'],"group_neutralize(x, group)","Neutralizes Alpha against groups. These groups can be subindustry, industry, sector, country or a constant",/operators/group_neutralize,ALL,Group:Aggregation,"GroupOp(x, group[,params])"
group_cartesian_product,Group,['REGULAR'],"group_cartesian_product(g1, g2)","Merge two groups into one group. If originally there are len_1 and len_2 group indices in g1 and g2, there will be len_1 * len_2 indices in the new group.",,,Group:Aggregation,"GroupOp(x, group[,params])"
inst_pnl,Special,['REGULAR'],inst_pnl(x),Generate pnl per instruments. Please note that the use of the inst_pnl() operator in an Alpha Expression is considered as utilizing the pv1 dataset (Price Volume Data for Equity) since it relies on pv1 data for calculations.,,,Special:Domain,Special(...)
